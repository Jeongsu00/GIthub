
GccApplication6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000284  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000284  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc2  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000834  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000605  00000000  00000000  000017e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00001de8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045b  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000442  00000000  00000000  00002373  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000027b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  8e:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART_INIT>:
﻿#include "UART.h"

void UART_INIT(void) {
	UCSR0A |= _BV(U2X0);
  96:	e0 ec       	ldi	r30, 0xC0	; 192
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	80 83       	st	Z, r24

	UBRR0H = 0x00;
  a0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 207;
  a4:	8f ec       	ldi	r24, 0xCF	; 207
  a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	UCSR0C |= 0x06;
  aa:	e2 ec       	ldi	r30, 0xC2	; 194
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	80 83       	st	Z, r24
	
	UCSR0B |= _BV(RXEN0);
  b4:	e1 ec       	ldi	r30, 0xC1	; 193
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 61       	ori	r24, 0x10	; 16
  bc:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
  be:	80 81       	ld	r24, Z
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <UART_receive>:
}

unsigned char UART_receive(void)
{
	while( !(UCSR0A & (1<<RXC0)) );
  c6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ca:	88 23       	and	r24, r24
  cc:	e4 f7       	brge	.-8      	; 0xc6 <UART_receive>
	return UDR0;
  ce:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  d2:	08 95       	ret

000000d4 <UART_transmit>:

void UART_transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE0)) );
  d4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d8:	95 ff       	sbrs	r25, 5
  da:	fc cf       	rjmp	.-8      	; 0xd4 <UART_transmit>
	UDR0 = data;
  dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e0:	08 95       	ret

000000e2 <INIT_TIMER1>:
#define PULSE_180		5000

void INIT_TIMER1(void)
{
	// Fast PWM 모드, TOP = ICR1
	TCCR1A |= (1 << WGM11);     // 
  e2:	e0 e8       	ldi	r30, 0x80	; 128
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
  ec:	a1 e8       	ldi	r26, 0x81	; 129
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	8c 91       	ld	r24, X
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS11);		// 분주율 8, 2MHz
  f6:	8c 91       	ld	r24, X
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	8c 93       	st	X, r24
	TCCR1A |= (1 << COM1A1);	// 비반전 모드   OCR1A 사용가능 OC1A 레지스트 사용
  fc:	80 81       	ld	r24, Z
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1B1);	// 비반전 모드	OCR1B 사용가능 OC1B 레지스트 사용
 102:	80 81       	ld	r24, Z
 104:	80 62       	ori	r24, 0x20	; 32
 106:	80 83       	st	Z, r24
	ICR1 = 40000;				// 20ms 주기  ??? 검색 해보기
 108:	80 e4       	ldi	r24, 0x40	; 64
 10a:	9c e9       	ldi	r25, 0x9C	; 156
 10c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 110:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	DDRB = 0xFF;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 118:	15 b8       	out	0x05, r1	; 5
 11a:	08 95       	ret

0000011c <main>:
}

int main(void)
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	64 97       	sbiw	r28, 0x14	; 20
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	cd bf       	out	0x3d, r28	; 61
	int index = 0;			// 수신 버퍼에 저장할 위치
	char buffer[20] = "";	// 수신 데이터 버퍼
 130:	1a 82       	std	Y+2, r1	; 0x02
 132:	19 82       	std	Y+1, r1	; 0x01
 134:	fe 01       	movw	r30, r28
 136:	33 96       	adiw	r30, 0x03	; 3
 138:	82 e1       	ldi	r24, 0x12	; 18
 13a:	df 01       	movw	r26, r30
 13c:	1d 92       	st	X+, r1
 13e:	8a 95       	dec	r24
 140:	e9 f7       	brne	.-6      	; 0x13c <main+0x20>
	char data;				// 수신 데이터
	
	
	UART_INIT();			// UART 통신 초기화
 142:	0e 94 4b 00 	call	0x96	; 0x96 <UART_INIT>
	INIT_TIMER1();
 146:	0e 94 71 00 	call	0xe2	; 0xe2 <INIT_TIMER1>
	
	while(1)
	{
		data = UART_receive();	// 데이터 수신
 14a:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_receive>
 14e:	18 2f       	mov	r17, r24
		buffer[index] = data;
 150:	89 83       	std	Y+1, r24	; 0x01
		
		if(strcmp(buffer, "q") == 0){
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	71 e0       	ldi	r23, 0x01	; 1
 156:	ce 01       	movw	r24, r28
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	0e 94 37 01 	call	0x26e	; 0x26e <strcmp>
 15e:	89 2b       	or	r24, r25
 160:	71 f4       	brne	.+28     	; 0x17e <main+0x62>
			OCR1A = PULSE_00;
 162:	80 eb       	ldi	r24, 0xB0	; 176
 164:	94 e0       	ldi	r25, 0x04	; 4
 166:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 16a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = PULSE_00;
 16e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 172:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			UART_transmit(data);
 176:	81 2f       	mov	r24, r17
 178:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_transmit>
 17c:	e6 cf       	rjmp	.-52     	; 0x14a <main+0x2e>
			index = 0;
		}                 
		else if(strcmp(buffer, "w") == 0){
 17e:	62 e0       	ldi	r22, 0x02	; 2
 180:	71 e0       	ldi	r23, 0x01	; 1
 182:	ce 01       	movw	r24, r28
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	0e 94 37 01 	call	0x26e	; 0x26e <strcmp>
 18a:	89 2b       	or	r24, r25
 18c:	71 f4       	brne	.+28     	; 0x1aa <main+0x8e>
			OCR1A = PULSE_45;
 18e:	84 e3       	ldi	r24, 0x34	; 52
 190:	98 e0       	ldi	r25, 0x08	; 8
 192:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 196:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = PULSE_45;
 19a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 19e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			UART_transmit(data);
 1a2:	81 2f       	mov	r24, r17
 1a4:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_transmit>
 1a8:	d0 cf       	rjmp	.-96     	; 0x14a <main+0x2e>
			index = 0;
		}
		else if(strcmp(buffer, "e") == 0){
 1aa:	64 e0       	ldi	r22, 0x04	; 4
 1ac:	71 e0       	ldi	r23, 0x01	; 1
 1ae:	ce 01       	movw	r24, r28
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	0e 94 37 01 	call	0x26e	; 0x26e <strcmp>
 1b6:	89 2b       	or	r24, r25
 1b8:	71 f4       	brne	.+28     	; 0x1d6 <main+0xba>
			OCR1A = PULSE_90;
 1ba:	8e e4       	ldi	r24, 0x4E	; 78
 1bc:	9c e0       	ldi	r25, 0x0C	; 12
 1be:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1c2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = PULSE_90;
 1c6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1ca:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			UART_transmit(data);
 1ce:	81 2f       	mov	r24, r17
 1d0:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_transmit>
 1d4:	ba cf       	rjmp	.-140    	; 0x14a <main+0x2e>
			index = 0;
		}
		else if(strcmp(buffer, "r") == 0){
 1d6:	66 e0       	ldi	r22, 0x06	; 6
 1d8:	71 e0       	ldi	r23, 0x01	; 1
 1da:	ce 01       	movw	r24, r28
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	0e 94 37 01 	call	0x26e	; 0x26e <strcmp>
 1e2:	89 2b       	or	r24, r25
 1e4:	71 f4       	brne	.+28     	; 0x202 <main+0xe6>
			OCR1A = PULSE_135;
 1e6:	80 ea       	ldi	r24, 0xA0	; 160
 1e8:	9f e0       	ldi	r25, 0x0F	; 15
 1ea:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = PULSE_135;
 1f2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1f6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			UART_transmit(data);
 1fa:	81 2f       	mov	r24, r17
 1fc:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_transmit>
 200:	a4 cf       	rjmp	.-184    	; 0x14a <main+0x2e>
			index = 0;
		}
		else if(strcmp(buffer, "t") == 0){
 202:	68 e0       	ldi	r22, 0x08	; 8
 204:	71 e0       	ldi	r23, 0x01	; 1
 206:	ce 01       	movw	r24, r28
 208:	01 96       	adiw	r24, 0x01	; 1
 20a:	0e 94 37 01 	call	0x26e	; 0x26e <strcmp>
 20e:	89 2b       	or	r24, r25
 210:	71 f4       	brne	.+28     	; 0x22e <main+0x112>
			OCR1A = PULSE_180;
 212:	88 e8       	ldi	r24, 0x88	; 136
 214:	93 e1       	ldi	r25, 0x13	; 19
 216:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 21a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = PULSE_180;
 21e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 222:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			UART_transmit(data);
 226:	81 2f       	mov	r24, r17
 228:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_transmit>
 22c:	8e cf       	rjmp	.-228    	; 0x14a <main+0x2e>
			index = 0;
		}
		else if(strcmp(buffer, "s") == 0){
 22e:	6a e0       	ldi	r22, 0x0A	; 10
 230:	71 e0       	ldi	r23, 0x01	; 1
 232:	ce 01       	movw	r24, r28
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	0e 94 37 01 	call	0x26e	; 0x26e <strcmp>
 23a:	89 2b       	or	r24, r25
 23c:	a1 f4       	brne	.+40     	; 0x266 <main+0x14a>
			UART_transmit(data);
 23e:	81 2f       	mov	r24, r17
 240:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_transmit>
			OCR1B = (0x04) | (0x08);
 244:	8c e0       	ldi	r24, 0x0C	; 12
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 24c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	bf ef       	ldi	r27, 0xFF	; 255
 252:	23 ec       	ldi	r18, 0xC3	; 195
 254:	89 e0       	ldi	r24, 0x09	; 9
 256:	b1 50       	subi	r27, 0x01	; 1
 258:	20 40       	sbci	r18, 0x00	; 0
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x13a>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x144>
 260:	00 00       	nop
			_delay_ms(200);
			PORTB = 0x00;
 262:	15 b8       	out	0x05, r1	; 5
 264:	72 cf       	rjmp	.-284    	; 0x14a <main+0x2e>
			index = 0;
		}
		else{
			UART_transmit(data);
 266:	81 2f       	mov	r24, r17
 268:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_transmit>
 26c:	6e cf       	rjmp	.-292    	; 0x14a <main+0x2e>

0000026e <strcmp>:
 26e:	fb 01       	movw	r30, r22
 270:	dc 01       	movw	r26, r24
 272:	8d 91       	ld	r24, X+
 274:	01 90       	ld	r0, Z+
 276:	80 19       	sub	r24, r0
 278:	01 10       	cpse	r0, r1
 27a:	d9 f3       	breq	.-10     	; 0x272 <strcmp+0x4>
 27c:	99 0b       	sbc	r25, r25
 27e:	08 95       	ret

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
